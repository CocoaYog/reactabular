webpackJsonp([26],{1148:function(e,t,a){var n=a(1),r=a(11),o=a(12).PageRenderer;o.__esModule&&(o=o.default);var i=r({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:a(1177)}},componentWillMount:function(){},render:function(){return n.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});i.__catalog_loader__=!0,e.exports=i},1177:function(e,t){e.exports="[![Join the chat at https://gitter.im/reactabular/reactabular](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/reactabular/reactabular) [![build status](https://secure.travis-ci.org/reactabular/reactabular.svg)](http://travis-ci.org/reactabular/reactabular) [![bitHound Score](https://www.bithound.io/github/reactabular/reactabular/badges/score.svg)](https://www.bithound.io/github/reactabular/reactabular) [![codecov](https://codecov.io/gh/reactabular/reactabular/branch/master/graph/badge.svg)](https://codecov.io/gh/reactabular/reactabular)\n[![OpenCollective](https://opencollective.com/reactabular/backers/badge.svg)](#backers)\n[![OpenCollective](https://opencollective.com/reactabular/sponsors/badge.svg)](#sponsors)\n\n# Reactabular - A framework for building the React table you need\n\nReactabular has been designed to be extensible. Rather than implementing a lot of functionality in its core, it provides extension points. You can, for instance, customize rendering on cell level. It is possible to implement functionality, such as search, pagination, sorting, and inline editing, through composition. The library includes a variety of utilities for this even though you may use third party ones as well.\n\nBy default Reactabular operates using a column and a data definition. It doesn't care where those come from. It just renders the table for you. This means Reactabular will fit right into your current data architecture. It doesn't constrain it in any manner.\n\nThe chosen approach pushes a lot of complexity out of the core. As a result it might take more code to achieve certain functionalities. This is the price of flexibility. And that's the primary design goal of Reactabular.\n\n> If you want to learn more about React, read [SurviveJS - Webpack and React](http://survivejs.com/).\n\n## Example\n\nThe following example illustrates the approach used by Reactabular:\n\n```jsx\n/*\nimport * as Table from '@reactabular/table';\n*/\n\nconst rows = [\n  {\n    id: 100,\n    name: 'John',\n    tools: {\n      hammer: true\n    },\n    country: 'fi'\n  },\n  {\n    id: 101,\n    name: 'Jack',\n    tools: {\n      hammer: false\n    },\n    country: 'dk'\n  }\n];\nconst countries = {\n  fi: 'Finland',\n  dk: 'Denmark'\n};\n\n// Customize table rendering. In this case we inject a custom\n// className. Overrides are possible too as this has to return\n// something React can render.\nconst renderers = {\n  table: (children, { renderer }) => renderer(children, { props: {\n    className: 'pure-table pure-table-striped'\n  }})\n};\n\n// Note that the repetitive headerCell logic could be pushed to a function.\n// Then you would have headerCell: headerCell('Name') for example.\n// Alternatively you could do something even more higher level.\n//\n// The same goes for bodyCell.\nconst columns = [\n  {\n    headerCell: <th onClick={() => alert(`clicked name`)}>Name</th>,\n    bodyCell: ({ name }) => <td>{name}</td>\n  },\n  {\n    headerCell: <th onClick={() => alert(`clicked active`)}>Active</th>,\n    bodyCell: ({ tools }) => <td>{tools.hammer ? 'Hammertime' : 'nope'}</td>\n  },\n  {\n    headerCell: <th onClick={() => alert(`clicked country`)}>Country</th>,\n    bodyCell: ({ country }) => <td>{countries[country]}</td>\n  }\n];\n\n<Table.Provider\n  columns={columns}\n  renderers={renderers}\n>\n  <Table.Header />\n\n  <Table.Body rows={rows} rowKey=\"id\" />\n</Table.Provider>\n```\n\n## Available Packages\n\nThe following image shows roughly what packages are available. You will need to install them individually based on your needs. It is possible to use packages beyond these, but the ones listed below are maintained within the Reactabular organization:\n\n![Reactabular packages](./images/overall.png)\n\n## Testimonials\n\n> If you've struggled with other React table components, you'll see why this one is the best! - [Tim Dorr](https://twitter.com/timdorr/status/750346565374455808)\n\n---\n\n> It’s not a regular table component it’s a whole framework to work with tables: sorting, drag’n’drop, filtering, etc. And it’s easy to change every part if you need something specific. - [Artem Sapegin](http://sapegin.me/)\n\n---\n\n> Great work with reactabular! Best grid library I've seen in React and tried many of them. - [Piotr Zmudzinski](https://github.com/reactabular/treetabular/issues/1#issue-204945773)\n\n---\n\nIf you are using Reactabular and want to endorse it, [let me know](https://github.com/reactabular/reactabular/issues/new).\n\n## Sponsors\n\n[![SurviveJS](./images/survivejs.png)](http://survivejs.com/) [![Kenandy](./images/kenandy.png)](http://www.kenandy.com/)\n\n[Become a sponsor](https://opencollective.com/reactabular#sponsor) and get your logo on our README on Github with a link to your site.\n\n[![](https://opencollective.com/reactabular/sponsor/0/avatar.svg)](https://opencollective.com/reactabular/sponsor/0/website)\n[![](https://opencollective.com/reactabular/sponsor/1/avatar.svg)](https://opencollective.com/reactabular/sponsor/1/website)\n\n## Backers\n\n[Become a backer](https://opencollective.com/reactabular#backer) and get your image on our README on Github with a link to your site.\n\n[![alt text](https://opencollective.com/reactabular/backer/0/avatar.svg)](https://opencollective.com/reactabular/backer/0/website)\n[![alt text](https://opencollective.com/reactabular/backer/1/avatar.svg)](https://opencollective.com/reactabular/backer/1/website)\n\n## License\n\nMIT. See LICENSE for details.\n"}});