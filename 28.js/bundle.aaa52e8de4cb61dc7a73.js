webpackJsonp([28],{1412:function(e,n,t){var r=t(0),a=t(8),o=t(9).PageRenderer;o.__esModule&&(o=o.default);var l=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1445)}},componentWillMount:function(){},render:function(){return r.createElement(o,Object.assign({},this.props,{content:this.state.content}))}});l.__catalog_loader__=!0,e.exports=l},1445:function(e,n){e.exports="**Formatters** provide means to customize Reactabular column definition through `header` and `cell`:\n\n* `header.formatters = [(<label>, { rowData: <label>, column: <column>, columnIndex: <number> }) => <string|React element>]`\n* `cell.formatters = [(<value>, { rowData: <object>, property: <string>, column: <column>, columnIndex: <number>, rowIndex: <number> }) => <string|React element>]`\n\nAs long as a formatter returns something that React can render, it will work. The results are rendered recursively from left to right **inside** a table cell.\n\n## See Also\n\n* [Resizable Columns](/examples/resizable-columns)\n"}});